"""
Front Matter Generator for AI-Generated Books

This module generates appropriate front matter sections for AI-generated books,
including AI-appropriate title pages, copyright notices, and introductory content
that acknowledges the AI generation process while maintaining professional standards.
"""

from typing import Dict, Any, Optional, List
from datetime import datetime

from src.utils.genre_defaults import get_genre_defaults


class FrontMatterGenerator:
    """
    Generates front matter content for AI-generated books.
    """

    def __init__(self, novel_data: Dict[str, Any], writer_profile: Dict[str, Any] = None):
        """
        Initialize the front matter generator.

        Args:
            novel_data: Complete novel data including metadata
            writer_profile: Writer profile information (optional)
        """
        self.novel_data = novel_data
        self.writer_profile = writer_profile or {}
        self.metadata = novel_data.get("metadata", {})
        self.genre = self.metadata.get("genre", "Fiction")
        self.genre_defaults = get_genre_defaults(self.genre)

    def generate_title_page(self) -> str:
        """
        Generate an AI-appropriate title page.

        Returns:
            HTML content for the title page
        """
        title = self.metadata.get("title", "Untitled")
        # Use the fictional writer profile name if available, otherwise use a generic name
        author = self.metadata.get("author", "AI Generated")
        if self.writer_profile and self.writer_profile.get("name"):
            author = self.writer_profile.get("name")

        # Check if this is part of a series
        series_info = ""
        if "series" in self.metadata and self.metadata["series"].get("is_part_of_series"):
            series_title = self.metadata["series"]["series_title"]
            book_number = self.metadata["series"]["book_number"]
            series_info = f"""
            <p class="centered series-info">Book {book_number} of the {series_title} Series</p>
            """

        # Add AI generation acknowledgment
        ai_attribution = """
        <p class="centered ai-attribution">Generated by Artificial Intelligence</p>
        """

        return f"""
        <div class="title-page">
            <div class="title-content">
                <h1 class="book-title">{title}</h1>
                <p class="centered">by</p>
                <h2 class="author-name">{author}</h2>
                {series_info}
                {ai_attribution}
            </div>
        </div>
        """

    def generate_copyright_page(self) -> str:
        """
        Generate an AI-appropriate copyright page.

        Returns:
            HTML content for the copyright page
        """
        title = self.metadata.get("title", "Untitled")
        # Use the fictional writer profile name if available, otherwise use a generic name
        author = self.metadata.get("author", "AI Generated")
        if self.writer_profile and self.writer_profile.get("name"):
            author = self.writer_profile.get("name")
        year = datetime.now().year

        # Determine content type for disclaimer
        genre_lower = self.genre.lower()
        if any(nf in genre_lower for nf in ["biography", "memoir", "history", "science", "philosophy"]):
            content_disclaimer = """
            <p class="no-indent">This work was generated by artificial intelligence and should be considered
            as creative content rather than factual information. While efforts have been made to create
            engaging and coherent content, readers should verify any factual claims independently.</p>
            """
        else:
            content_disclaimer = """
            <p class="no-indent">This is a work of fiction generated by artificial intelligence. Names,
            characters, places, and incidents are products of AI generation or are used fictitiously.
            Any resemblance to actual persons, living or dead, events, or locales is entirely coincidental.</p>
            """

        return f"""
        <div class="copyright-page">
            <h1>Copyright Information</h1>

            <p class="no-indent"><strong>{title}</strong></p>
            <p class="no-indent">by {author}</p>
            <p class="no-indent">Â© {year} AI Generated Content</p>

            <p class="no-indent">This book was generated using artificial intelligence technology.
            The content, characters, and narrative were created through AI generation processes.</p>

            {content_disclaimer}

            <p class="no-indent">All rights reserved. No part of this publication may be reproduced,
            distributed, or transmitted in any form or by any means, including photocopying, recording,
            or other electronic or mechanical methods, without the prior written permission of the
            content creator, except in the case of brief quotations embodied in critical reviews
            and certain other noncommercial uses permitted by copyright law.</p>

            <p class="no-indent">Generated on: {datetime.now().strftime("%B %d, %Y")}</p>

            <p class="no-indent">For more information about AI-generated content and this generation
            system, please see the "About This AI Generation" section at the end of this book.</p>
        </div>
        """

    def generate_introduction(self) -> Optional[str]:
        """
        Generate genre-appropriate introductory content.

        Returns:
            HTML content for introduction or None if not applicable
        """
        genre_lower = self.genre.lower()

        # Different introduction types based on genre
        if "poetry" in genre_lower:
            return self._generate_poetry_introduction()
        elif any(nf in genre_lower for nf in ["biography", "memoir", "history"]):
            return self._generate_nonfiction_introduction()
        elif "anthology" in genre_lower or "collection" in genre_lower:
            return self._generate_collection_introduction()
        elif "series" in self.metadata and self.metadata["series"].get("book_number", 1) == 1:
            return self._generate_series_introduction()
        else:
            return self._generate_standard_introduction()

    def _generate_poetry_introduction(self) -> str:
        """Generate introduction for poetry collections."""
        themes = self.genre_defaults.get("themes", ["Expression", "Emotion"])
        theme_text = ", ".join(themes[:3])

        return f"""
        <div class="introduction">
            <h1>Introduction</h1>

            <p>This collection of poetry was generated through artificial intelligence, exploring
            themes of {theme_text.lower()}. Each poem represents a unique intersection of
            algorithmic creativity and human-like expression.</p>

            <p>The AI generation process considered various poetic forms, emotional resonances,
            and thematic connections to create a cohesive collection that speaks to the human
            experience through the lens of artificial creativity.</p>

            <p>We invite you to experience these verses as both literary works and as examples
            of the evolving relationship between technology and artistic expression.</p>
        </div>
        """

    def _generate_nonfiction_introduction(self) -> str:
        """Generate introduction for non-fiction works."""
        return f"""
        <div class="introduction">
            <h1>About This Work</h1>

            <p>This {self.genre.lower()} work was generated using artificial intelligence technology.
            While the AI has been trained on extensive datasets and strives for accuracy and
            coherence, readers should approach this content as AI-generated material rather
            than authoritative factual information.</p>

            <p>The generation process involved analyzing patterns in {self.genre.lower()} writing,
            incorporating relevant themes and structures, and creating content that aims to be
            both informative and engaging.</p>

            <p>We encourage readers to use this work as a starting point for exploration and to
            verify any factual claims through additional authoritative sources.</p>
        </div>
        """

    def _generate_collection_introduction(self) -> str:
        """Generate introduction for collections/anthologies."""
        return f"""
        <div class="introduction">
            <h1>About This Collection</h1>

            <p>This collection represents an exploration of {self.genre.lower()} through the lens
            of artificial intelligence. Each piece within this anthology was generated to contribute
            to a cohesive whole while maintaining its individual character and voice.</p>

            <p>The AI generation process considered thematic unity, stylistic variety, and
            narrative progression to create a collection that offers both diversity and coherence.</p>

            <p>We hope this collection demonstrates the potential for AI to create meaningful
            literary experiences while acknowledging the unique nature of machine-generated creativity.</p>
        </div>
        """

    def _generate_series_introduction(self) -> str:
        """Generate introduction for the first book in a series."""
        series_title = self.metadata["series"]["series_title"]
        planned_books = self.metadata["series"].get("planned_books", "multiple")

        return f"""
        <div class="introduction">
            <h1>Welcome to the {series_title} Series</h1>

            <p>This book marks the beginning of the {series_title} series, a {planned_books}-book
            journey generated through artificial intelligence. Each book in this series builds
            upon the previous volumes while telling its own complete story.</p>

            <p>The AI generation process for this series involved creating overarching plot threads,
            developing character arcs that span multiple books, and establishing a consistent world
            and tone that will carry through the entire series.</p>

            <p>We invite you to join this AI-generated adventure and experience how artificial
            intelligence can create compelling, interconnected narratives across multiple volumes.</p>
        </div>
        """

    def _generate_standard_introduction(self) -> str:
        """Generate standard introduction for fiction works."""
        themes = self.genre_defaults.get("themes", ["Adventure", "Discovery"])
        theme_text = ", ".join(themes[:3])

        return f"""
        <div class="introduction">
            <h1>About This Story</h1>

            <p>This {self.genre.lower()} novel was created through artificial intelligence,
            exploring themes of {theme_text.lower()}. The AI generation process involved
            developing complex characters, crafting engaging plot lines, and creating a
            narrative that aims to captivate and entertain.</p>

            <p>The story you're about to read represents the intersection of technology and
            storytelling, where algorithms have been trained to understand narrative structure,
            character development, and thematic depth.</p>

            <p>We hope you find this AI-generated tale both entertaining and thought-provoking,
            offering a unique perspective on the possibilities of artificial creativity.</p>
        </div>
        """

    def generate_about_generation(self) -> str:
        """
        Generate "About This Generation" section replacing traditional "About the Author".

        Returns:
            HTML content for the generation information
        """
        # Get actual chapter/section count from novel data if available
        actual_chapter_count = len(self.novel_data.get("chapters", []))

        # For special formats, use appropriate terminology
        chapter_terminology = "chapters"
        if "poetry" in self.genre.lower():
            chapter_terminology = "sections"
        elif "collection" in self.genre.lower():
            chapter_terminology = "pieces"

        generation_params = {
            "genre": self.genre,
            "target_length": self.genre_defaults.get("target_length", "medium"),
            "writing_style": self.genre_defaults.get("writing_style", "descriptive"),
            "chapter_count": actual_chapter_count if actual_chapter_count > 0 else self.genre_defaults.get("chapter_count", "multiple"),
            "chapter_terminology": chapter_terminology,
            "themes": self.genre_defaults.get("themes", [])
        }

        # Fictional writer profile information if available
        profile_info = ""
        if self.writer_profile:
            profile_name = self.writer_profile.get("name", "Custom Profile")
            profile_style = self.writer_profile.get("profile_data", {}).get("writing_style", "")
            cultural_background = self.writer_profile.get("cultural_background", "")
            era = self.writer_profile.get("era", "")

            if profile_style:
                profile_context = ""
                if cultural_background and era:
                    profile_context = f" This fictional {cultural_background} author from the {era} era brings"

                profile_info = f"""
                <p>This book was generated using the "{profile_name}" fictional writer profile.{profile_context}
                The profile is characterized by {profile_style.lower()}</p>

                <p><em>Note: {profile_name} is a fictional author persona created specifically for AI-generated literature.
                This profile is inspired by real literary masters but represents an entirely original fictional identity.</em></p>
                """

        theme_list = ", ".join(generation_params["themes"][:4]) if generation_params["themes"] else "various themes"

        return f"""
        <div class="about-generation">
            <h1>About This AI Generation</h1>

            <p>This {generation_params["genre"].lower()} novel was generated using advanced
            artificial intelligence technology specifically designed for creative writing.
            The AI system analyzed thousands of books in the {generation_params["genre"].lower()}
            genre to understand narrative patterns, character development techniques, and
            thematic elements.</p>

            {profile_info}

            <h2>Generation Parameters</h2>
            <ul>
                <li><strong>Genre:</strong> {generation_params["genre"]}</li>
                <li><strong>Length:</strong> {generation_params["target_length"].title()}-length work</li>
                <li><strong>Writing Style:</strong> {generation_params["writing_style"]}</li>
                <li><strong>Structure:</strong> {generation_params["chapter_count"]} {generation_params["chapter_terminology"]}</li>
                <li><strong>Themes:</strong> {theme_list}</li>
            </ul>

            <h2>The Generation Process</h2>
            <p>The creation of this book involved multiple AI generation phases:</p>
            <ol>
                <li><strong>Writer Profile Development:</strong> Establishing a consistent authorial voice</li>
                <li><strong>Story Outline:</strong> Creating a comprehensive plot structure</li>
                <li><strong>Character Development:</strong> Designing complex, multi-dimensional characters</li>
                <li><strong>Chapter Generation:</strong> Writing each chapter with attention to pacing and development</li>
                <li><strong>Enhancement:</strong> Refining prose, dialogue, and narrative flow</li>
            </ol>

            <p>This process ensures that while the content is AI-generated, it maintains
            the quality, coherence, and emotional depth that readers expect from
            {generation_params["genre"].lower()} literature.</p>
        </div>
        """

    def generate_table_of_contents(self, chapters: List[Dict[str, Any]] = None) -> str:
        """
        Generate a Table of Contents page for the front matter.

        Args:
            chapters: List of chapter data for TOC generation

        Returns:
            HTML content for the table of contents
        """
        # Get chapter data from novel_data if not provided
        if chapters is None:
            chapters = self.novel_data.get("chapters", [])

        # Determine chapter terminology based on genre
        chapter_term = "Chapter"
        if self.genre.lower() in ["poetry collection", "poetry"]:
            chapter_term = "Section"
        elif self.genre.lower() in ["essay collection", "short story collection"]:
            chapter_term = "Chapter"

        # Build TOC entries
        toc_entries = []

        # Add front matter entries (excluding title page and TOC itself)
        front_matter_items = [
            ("Copyright", "copyright.xhtml"),
            ("Introduction", "introduction.xhtml") if self.generate_introduction() else None,
            ("About This Generation", "about_generation.xhtml")
        ]

        # Filter out None entries
        front_matter_items = [item for item in front_matter_items if item is not None]

        if front_matter_items:
            toc_entries.append('<div class="toc-section">')
            toc_entries.append('<h2>Front Matter</h2>')
            toc_entries.append('<ul>')
            for title, filename in front_matter_items:
                toc_entries.append(f'<li><a href="{filename}">{title}</a></li>')
            toc_entries.append('</ul>')
            toc_entries.append('</div>')

        # Add chapters
        if chapters:
            toc_entries.append('<div class="toc-section">')
            toc_entries.append(f'<h2>{chapter_term}s</h2>')
            toc_entries.append('<ul>')

            for chapter in chapters:
                chapter_num = chapter.get("number", 1)
                chapter_title = chapter.get("title", f"{chapter_term} {chapter_num}")
                filename = f"chapter_{chapter_num:02d}.xhtml"

                # Clean up chapter title for display
                display_title = chapter_title
                if display_title.startswith(f"{chapter_term} {chapter_num}:"):
                    display_title = display_title[len(f"{chapter_term} {chapter_num}:"):]
                elif display_title.startswith(f"{chapter_term} {chapter_num}"):
                    display_title = display_title[len(f"{chapter_term} {chapter_num}"):]
                display_title = display_title.strip()

                if display_title:
                    full_title = f"{chapter_term} {chapter_num}: {display_title}"
                else:
                    full_title = f"{chapter_term} {chapter_num}"

                toc_entries.append(f'<li><a href="{filename}">{full_title}</a></li>')

            toc_entries.append('</ul>')
            toc_entries.append('</div>')

        # Add back matter entries
        back_matter_items = [
            ("About the Author", "writer_profile.xhtml"),
            ("Series Information", "series_information.xhtml"),
            ("Technical Details", "technical_details.xhtml")
        ]

        toc_entries.append('<div class="toc-section">')
        toc_entries.append('<h2>Additional Information</h2>')
        toc_entries.append('<ul>')
        for title, filename in back_matter_items:
            toc_entries.append(f'<li><a href="{filename}">{title}</a></li>')
        toc_entries.append('</ul>')
        toc_entries.append('</div>')

        return f"""
        <div class="table-of-contents">
            <h1>Table of Contents</h1>
            {''.join(toc_entries)}
        </div>
        """

    def get_all_front_matter(self) -> Dict[str, str]:
        """
        Generate all front matter sections.

        Returns:
            Dictionary with section names as keys and HTML content as values
        """
        sections = {
            "title_page": self.generate_title_page(),
            "copyright": self.generate_copyright_page(),
            "table_of_contents": self.generate_table_of_contents(),
            "about_generation": self.generate_about_generation()
        }

        # Add introduction if applicable
        introduction = self.generate_introduction()
        if introduction:
            sections["introduction"] = introduction

        return sections
